{
  "address": "0x12Ab5A925Ec5Dac5004F07A20ca7b40c0aafb011",
  "abi": [
    {
      "inputs": [],
      "name": "NftMarket__AlreadyListed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NftMarket__ItemNotListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarket__NoProceeds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarket__NotApproved",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NftMarket__NotEnoughPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarket__NotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ItemBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ItemDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "PriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "nftAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getListing",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "internalType": "struct NftMarket.Details",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "getProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "sellItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "updatePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe65a0d1f5b5d35330ae345a1e8ecb3b8cef3050a490d48213f957ea74a9a9a49",
  "receipt": {
    "to": null,
    "from": "0xcBE66646C0450d75957F726cF99dAD471916933B",
    "contractAddress": "0x12Ab5A925Ec5Dac5004F07A20ca7b40c0aafb011",
    "transactionIndex": 46,
    "gasUsed": "1270246",
    "logsBloom": "0x
    "blockHash": "0x435c240946dfd505466b917a85e2af453ddeecb95bb29c0215703e16a6d0a056",
    "transactionHash": "0xe65a0d1f5b5d35330ae345a1e8ecb3b8cef3050a490d48213f957ea74a9a9a49",
    "logs": [],
    "blockNumber": 5860544,
    "cumulativeGasUsed": "6061237",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2fd3e48449ee2b5221de71bd55391e12",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NftMarket__AlreadyListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NftMarket__ItemNotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarket__NoProceeds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarket__NotApproved\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NftMarket__NotEnoughPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarket__NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ItemDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"nftAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct NftMarket.Details\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"sellItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NftMarket.sol\":\"NftMarket\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/NftMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nerror NftMarket__NotEnoughPrice(address nftAddress, uint256 tokenId, uint256 price);\\nerror NftMarket__NotApproved();\\nerror NftMarket__AlreadyListed();\\nerror NftMarket__NotOwner();\\nerror NftMarket__ItemNotListed(address nftAddress, uint256 tokenId);\\nerror NftMarket__NoProceeds();\\n\\ncontract NftMarket {\\n    //mapping the address of nft to the token id to the details\\n    struct Details {\\n        uint256 price;\\n        address seller;\\n    }\\n\\n    event nftAdded(\\n        address indexed nftAddress,\\n        uint256 indexed tokenId,\\n        uint256 price,\\n        address indexed sender\\n    );\\n\\n    event ItemBought(address indexed buyer, address indexed nftAddress, uint256 price);\\n    event ItemDeleted(address indexed nftAddress, uint256 indexed tokenId, address indexed sender);\\n    event PriceUpdated(address indexed nftAddress, uint256 indexed tokenId, uint256 price);\\n\\n    mapping(address => mapping(uint256 => Details)) private s_nftInfo;\\n    mapping(address => uint256) private s_proceeds;\\n\\n    /////////////////////////////////////\\n    //modifiers\\n    modifier notListed(address nftAddress, uint256 tokenId) {\\n        Details memory list = s_nftInfo[nftAddress][tokenId];\\n        if (list.price > 0) {\\n            revert NftMarket__AlreadyListed();\\n        }\\n        _;\\n    }\\n    modifier onlyOwner(\\n        address sender,\\n        uint256 tokenId,\\n        address nftAddress\\n    ) {\\n        IERC721 nft = IERC721(nftAddress);\\n        address spender = nft.ownerOf(tokenId);\\n        if (sender != spender) {\\n            revert NftMarket__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    modifier rightPrice(\\n        uint256 sentValue,\\n        address nftAddress,\\n        uint256 tokenId\\n    ) {\\n        if (sentValue < s_nftInfo[nftAddress][tokenId].price) {\\n            revert NftMarket__NotEnoughPrice(\\n                nftAddress,\\n                tokenId,\\n                s_nftInfo[nftAddress][tokenId].price\\n            );\\n        }\\n        _;\\n    }\\n\\n    modifier isListed(address nftAddress, uint256 tokenId) {\\n        if (s_nftInfo[nftAddress][tokenId].price < 0) {\\n            revert NftMarket__ItemNotListed(nftAddress, tokenId);\\n        }\\n        _;\\n    }\\n\\n    /////////////////////////////////////\\n    //functions\\n    function listItem(\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint256 price\\n    ) external notListed(nftAddress, tokenId) onlyOwner(msg.sender, tokenId, nftAddress) {\\n        if (price < 0) {\\n            revert NftMarket__NotEnoughPrice(nftAddress, tokenId, price);\\n        }\\n        IERC721 nft = IERC721(nftAddress);\\n        if (nft.getApproved(tokenId) != address(this)) {\\n            revert NftMarket__NotApproved();\\n        }\\n        s_nftInfo[nftAddress][tokenId] = Details(price, msg.sender);\\n        emit nftAdded(nftAddress, tokenId, price, msg.sender);\\n    }\\n\\n    function sellItem(\\n        address nftAddress,\\n        uint256 tokenId\\n    ) external payable isListed(nftAddress, tokenId) rightPrice(msg.value, nftAddress, tokenId) {\\n        s_proceeds[s_nftInfo[nftAddress][tokenId].seller] += msg.value;\\n        delete (s_nftInfo[nftAddress][tokenId]);\\n        IERC721(nftAddress).safeTransferFrom(\\n            s_nftInfo[nftAddress][tokenId].seller,\\n            msg.sender,\\n            tokenId\\n        );\\n        emit ItemBought(msg.sender, nftAddress, tokenId);\\n    }\\n\\n    function cancelListing(\\n        address nftAddress,\\n        uint256 tokenId\\n    ) external onlyOwner(msg.sender, tokenId, nftAddress) isListed(nftAddress, tokenId) {\\n        delete (s_nftInfo[nftAddress][tokenId]);\\n        emit ItemDeleted(nftAddress, tokenId, msg.sender);\\n    }\\n\\n    function updatePrice(\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint256 price\\n    ) external onlyOwner(msg.sender, tokenId, nftAddress) isListed(nftAddress, tokenId) {\\n        if (price < 0) {\\n            revert NftMarket__NotEnoughPrice(nftAddress, tokenId, price);\\n        }\\n        s_nftInfo[nftAddress][tokenId].price = price;\\n        emit PriceUpdated(nftAddress, tokenId, price);\\n    }\\n\\n    function withdraw() external payable {\\n        if (s_proceeds[msg.sender] <= 0) {\\n            revert NftMarket__NoProceeds();\\n        }\\n        s_proceeds[msg.sender] = 0;\\n\\n        (bool success, ) = payable(msg.sender).call{value: s_proceeds[msg.sender]}(\\\"\\\");\\n        require(success, \\\"Transaction Failed\\\");\\n    }\\n\\n    /////getter functions\\n    function getListing(\\n        address nftAddress,\\n        uint256 tokenId\\n    ) external view returns (Details memory) {\\n        return s_nftInfo[nftAddress][tokenId];\\n    }\\n\\n    function getProceeds(address seller) external view returns (uint256) {\\n        return s_proceeds[seller];\\n    }\\n}\\n\\n/*\\nlist \\u2705,sell\\u2705,cancelListing\\u2705,updatePrice\\u2705,withdrawal\\n\\n1.listing\\n    check price.,check already uploaded,check if approved for operating,store the details of the uploaded nft\\n*/\\n\",\"keccak256\":\"0xea86fbe7f499af7c2cf46a354017489d6d581305eda62ef7254c118a367928b8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061161c806100206000396000f3fe6080604052600436106100705760003560e01c806388700d1c1161004e57806388700d1c146100d857806389bfd38f14610115578063b2ddee061461013e578063e57d6fb71461016757610070565b8063096c5e1a1461007557806330cfeda9146100915780633ccfd60b146100ce575b600080fd5b61008f600480360381019061008a9190611286565b610190565b005b34801561009d57600080fd5b506100b860048036038101906100b391906112c6565b6105b4565b6040516100c59190611302565b60405180910390f35b6100d66105fd565b005b3480156100e457600080fd5b506100ff60048036038101906100fa9190611286565b6107a9565b60405161010c919061136a565b60405180910390f35b34801561012157600080fd5b5061013c60048036038101906101379190611385565b610873565b005b34801561014a57600080fd5b5061016560048036038101906101609190611286565b610ccc565b005b34801561017357600080fd5b5061018e60048036038101906101899190611385565b610f3a565b005b818160008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060000154101561022c5781816040517fd5b4677b0000000000000000000000000000000000000000000000000000000081526004016102239291906113e7565b60405180910390fd5b3484846000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008281526020019081526020016000206000015483101561031c5781816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020600001546040517f8d06e6fc00000000000000000000000000000000000000000000000000000000815260040161031393929190611410565b60405180910390fd5b34600160008060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103dd9190611476565b925050819055506000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508673ffffffffffffffffffffffffffffffffffffffff166342842e0e6000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633896040518463ffffffff1660e01b8152600401610514939291906114aa565b600060405180830381600087803b15801561052e57600080fd5b505af1158015610542573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f1d23a6255c78522601b841bc62d88a98b1e9a358d1b16957143effa889faa03c886040516105a39190611302565b60405180910390a350505050505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610676576040517f07cd4b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405161072090611512565b60006040518083038185875af1925050503d806000811461075d576040519150601f19603f3d011682016040523d82523d6000602084013e610762565b606091505b50509050806107a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079d90611584565b60405180910390fd5b50565b6107b16111bd565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b828260008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081600001511115610972576040517f2cc9fa0400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b338587600081905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016109b59190611302565b602060405180830381865afa1580156109d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f691906115b9565b90508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610a5d576040517f732bfb2f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000891015610aa7578a8a8a6040517f8d06e6fc000000000000000000000000000000000000000000000000000000008152600401610a9e93929190611410565b60405180910390fd5b60008b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8d6040518263ffffffff1660e01b8152600401610afc9190611302565b602060405180830381865afa158015610b19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3d91906115b9565b73ffffffffffffffffffffffffffffffffffffffff1614610b8a576040517f11614e8700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808b81526020013373ffffffffffffffffffffffffffffffffffffffff168152506000808e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050503373ffffffffffffffffffffffffffffffffffffffff168b8d73ffffffffffffffffffffffffffffffffffffffff167f9280037d6eac12050e554eddc1a5934355121873208fafeab7022e041020e5aa8d604051610cb69190611302565b60405180910390a4505050505050505050505050565b338183600081905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610d0f9190611302565b602060405180830381865afa158015610d2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5091906115b9565b90508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610db7576040517f732bfb2f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b868660008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600001541015610e535781816040517fd5b4677b000000000000000000000000000000000000000000000000000000008152600401610e4a9291906113e7565b60405180910390fd5b6000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008981526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550503373ffffffffffffffffffffffffffffffffffffffff16888a73ffffffffffffffffffffffffffffffffffffffff167fa7263617953cfa9fa68d42895cd4c09a5f6ce25c443bc355abb6a01b0be6f94460405160405180910390a4505050505050505050565b338284600081905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610f7d9190611302565b602060405180830381865afa158015610f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbe91906115b9565b90508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611025576040517f732bfb2f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b878760008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000015410156110c15781816040517fd5b4677b0000000000000000000000000000000000000000000000000000000081526004016110b89291906113e7565b60405180910390fd5b600088101561110b578989896040517f8d06e6fc00000000000000000000000000000000000000000000000000000000815260040161110293929190611410565b60405180910390fd5b876000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b815260200190815260200160002060000181905550888a73ffffffffffffffffffffffffffffffffffffffff167fb556fac599c3c70efb9ab1fa725ecace6c81cc48d1455f886607def065f3e0c08a6040516111a99190611302565b60405180910390a350505050505050505050565b604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061121d826111f2565b9050919050565b61122d81611212565b811461123857600080fd5b50565b60008135905061124a81611224565b92915050565b6000819050919050565b61126381611250565b811461126e57600080fd5b50565b6000813590506112808161125a565b92915050565b6000806040838503121561129d5761129c6111ed565b5b60006112ab8582860161123b565b92505060206112bc85828601611271565b9150509250929050565b6000602082840312156112dc576112db6111ed565b5b60006112ea8482850161123b565b91505092915050565b6112fc81611250565b82525050565b600060208201905061131760008301846112f3565b92915050565b61132681611250565b82525050565b61133581611212565b82525050565b604082016000820151611351600085018261131d565b506020820151611364602085018261132c565b50505050565b600060408201905061137f600083018461133b565b92915050565b60008060006060848603121561139e5761139d6111ed565b5b60006113ac8682870161123b565b93505060206113bd86828701611271565b92505060406113ce86828701611271565b9150509250925092565b6113e181611212565b82525050565b60006040820190506113fc60008301856113d8565b61140960208301846112f3565b9392505050565b600060608201905061142560008301866113d8565b61143260208301856112f3565b61143f60408301846112f3565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061148182611250565b915061148c83611250565b92508282019050808211156114a4576114a3611447565b5b92915050565b60006060820190506114bf60008301866113d8565b6114cc60208301856113d8565b6114d960408301846112f3565b949350505050565b600081905092915050565b50565b60006114fc6000836114e1565b9150611507826114ec565b600082019050919050565b600061151d826114ef565b9150819050919050565b600082825260208201905092915050565b7f5472616e73616374696f6e204661696c65640000000000000000000000000000600082015250565b600061156e601283611527565b915061157982611538565b602082019050919050565b6000602082019050818103600083015261159d81611561565b9050919050565b6000815190506115b381611224565b92915050565b6000602082840312156115cf576115ce6111ed565b5b60006115dd848285016115a4565b9150509291505056fea26469706673582212207f224062b61325037ae95ff3178be91403b022494a101b14412d50f6ccd7138164736f6c63430008180033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2859,
        "contract": "contracts/NftMarket.sol:NftMarket",
        "label": "s_nftInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Details)2818_storage))"
      },
      {
        "astId": 2863,
        "contract": "contracts/NftMarket.sol:NftMarket",
        "label": "s_proceeds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Details)2818_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NftMarket.Details))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Details)2818_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Details)2818_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NftMarket.Details)",
        "numberOfBytes": "32",
        "value": "t_struct(Details)2818_storage"
      },
      "t_struct(Details)2818_storage": {
        "encoding": "inplace",
        "label": "struct NftMarket.Details",
        "members": [
          {
            "astId": 2815,
            "contract": "contracts/NftMarket.sol:NftMarket",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2817,
            "contract": "contracts/NftMarket.sol:NftMarket",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}